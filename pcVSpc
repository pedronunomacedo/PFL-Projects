

% If player chooses option 1 (Place a stone of their color 
%                         AND a neutral stone on empty cells)
game_cycle4(BoardSize, Board, N, OptionMenu, OptionDifficulty) :-
    (OptionDifficulty == 1),
    (OptionMenu == 4),
    player(Player),
    getPlayerSymbol(Player, PlayerSymbol),
    


    optionTwoBotPlay(Column, Row, Board, BoardSize, PlayerSymbol), nl, nl,    
    
    retract(board(Board)),
    createBoardNew(BoardSize, BoardSize, Column, Row, Board, BoardNew, PlayerSymbol), % Put the stone with our colour
    assert(board(BoardNew)),

    
    game_over(BoardNew, PlayerSymbol, BoardSize, GameOver), 
    (GameOver == 1 ->
        printAllBoard(BoardSize, BoardNew),
        nl
        ;
 
        optionTwoBotPlay(ColumnNeutral, RowNeutral, BoardNew, BoardSize, 'n'), nl, nl,
        write('Press 1 to continue: '),
        read(Ola),
        (Ola = 1), nl, nl, nl,
        
        createBoardNew(BoardSize, BoardSize, ColumnNeutral, RowNeutral, BoardNew, FinalBoard, 'n'), % Put the neutral stone
        assert(board(FinalBoard)),
        cls,
        initialMenuDisplay,


        retract(player(Player)),
        NewPlayer is (mod(Player, 2) + 1),
        assert(player(NewPlayer)), 

        printAllBoard(BoardSize, FinalBoard), nl, 
        
        Next is N+1,

        game_cycle4(BoardSize, FinalBoard, Next, OptionMenu, OptionDifficulty)
    ).




game_cycle4(BoardSize, Board, N, OptionMenu, OptionDifficulty) :- 
    false.